create type "public"."template_activity_id" as enum ('favorite', 'email', 'call', 'share', 'flag');

create table "public"."template_activity" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "template_id" uuid not null,
    "action" template_activity_id not null,
    "state" text,
    "district" text
);


alter table "public"."template_activity" enable row level security;

create table "public"."templates" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "author_id" uuid,
    "title" text not null,
    "subject" text not null,
    "message" text not null,
    "favorites" integer not null default 0,
    "reviewed" boolean not null default false
);


alter table "public"."templates" enable row level security;

CREATE UNIQUE INDEX template_activity_pkey ON public.template_activity USING btree (id);

CREATE UNIQUE INDEX templates_pkey ON public.templates USING btree (id);

alter table "public"."template_activity" add constraint "template_activity_pkey" PRIMARY KEY using index "template_activity_pkey";

alter table "public"."templates" add constraint "templates_pkey" PRIMARY KEY using index "templates_pkey";

alter table "public"."template_activity" add constraint "template_activity_district_check" CHECK ((length(district) <= 2)) not valid;

alter table "public"."template_activity" validate constraint "template_activity_district_check";

alter table "public"."template_activity" add constraint "template_activity_state_check" CHECK ((length(state) <= 2)) not valid;

alter table "public"."template_activity" validate constraint "template_activity_state_check";

alter table "public"."template_activity" add constraint "template_activity_template_id_fkey" FOREIGN KEY (template_id) REFERENCES templates(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."template_activity" validate constraint "template_activity_template_id_fkey";

alter table "public"."templates" add constraint "templates_author_id_fkey" FOREIGN KEY (author_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."templates" validate constraint "templates_author_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.templates_search(templates)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$
  select $1.title || ' ' || $1.message;
$function$
;

grant delete on table "public"."template_activity" to "anon";

grant insert on table "public"."template_activity" to "anon";

grant references on table "public"."template_activity" to "anon";

grant select on table "public"."template_activity" to "anon";

grant trigger on table "public"."template_activity" to "anon";

grant truncate on table "public"."template_activity" to "anon";

grant update on table "public"."template_activity" to "anon";

grant delete on table "public"."template_activity" to "authenticated";

grant insert on table "public"."template_activity" to "authenticated";

grant references on table "public"."template_activity" to "authenticated";

grant select on table "public"."template_activity" to "authenticated";

grant trigger on table "public"."template_activity" to "authenticated";

grant truncate on table "public"."template_activity" to "authenticated";

grant update on table "public"."template_activity" to "authenticated";

grant delete on table "public"."template_activity" to "service_role";

grant insert on table "public"."template_activity" to "service_role";

grant references on table "public"."template_activity" to "service_role";

grant select on table "public"."template_activity" to "service_role";

grant trigger on table "public"."template_activity" to "service_role";

grant truncate on table "public"."template_activity" to "service_role";

grant update on table "public"."template_activity" to "service_role";

grant delete on table "public"."templates" to "anon";

grant insert on table "public"."templates" to "anon";

grant references on table "public"."templates" to "anon";

grant select on table "public"."templates" to "anon";

grant trigger on table "public"."templates" to "anon";

grant truncate on table "public"."templates" to "anon";

grant update on table "public"."templates" to "anon";

grant delete on table "public"."templates" to "authenticated";

grant insert on table "public"."templates" to "authenticated";

grant references on table "public"."templates" to "authenticated";

grant select on table "public"."templates" to "authenticated";

grant trigger on table "public"."templates" to "authenticated";

grant truncate on table "public"."templates" to "authenticated";

grant update on table "public"."templates" to "authenticated";

grant delete on table "public"."templates" to "service_role";

grant insert on table "public"."templates" to "service_role";

grant references on table "public"."templates" to "service_role";

grant select on table "public"."templates" to "service_role";

grant trigger on table "public"."templates" to "service_role";

grant truncate on table "public"."templates" to "service_role";

grant update on table "public"."templates" to "service_role";

create policy "Enable insert for all users"
on "public"."template_activity"
as permissive
for insert
to public
with check (true);


create policy "Enable delete for users based on author_id"
on "public"."templates"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = author_id));


create policy "Enable insert for authenticated users only"
on "public"."templates"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for anyone"
on "public"."templates"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on author id"
on "public"."templates"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = author_id))
with check ((( SELECT auth.uid() AS uid) = author_id));



